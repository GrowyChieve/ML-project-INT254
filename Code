import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load the original dataset
data = pd.read_csv('music_data2.csv')

# Create a user-item matrix
user_item_matrix = data.pivot_table(index='user_id', columns='song_id', values='listen_count', fill_value=0)

# Calculate cosine similarity between users
user_similarity_matrix = cosine_similarity(user_item_matrix)

# Get recommendations for a specific user with song names
def get_recommendations_with_names(user_id, user_similarity_matrix, user_item_matrix, data):
    # Get the user's similarity scores with other users
    user_similarities = user_similarity_matrix[user_id]

    # Find the songs the user hasn't listened to
    listened_songs = user_item_matrix.loc[user_id]
    not_listened = listened_songs.isnull()

    # Calculate recommendations based on similarity scores
    recommended_songs = []
    for song_id in user_item_matrix.columns:
        if listened_songs[song_id] > 0:  # User has listened to this song
            continue

        song_listen_count = user_item_matrix[song_id]  # Listen count for the song by all users
        similarity_scores = user_similarities * (song_listen_count.fillna(0))  # Multiply similarities with listen counts
        weighted_average = similarity_scores.sum() / (user_similarities.sum() + 1e-10)  # Calculate the weighted average

        if weighted_average > 0:  # If a positive recommendation
            recommended_songs.append((song_id, weighted_average))

    # Sort recommendations by weighted average and return top 10
    recommended_songs.sort(key=lambda x: x[1], reverse=True)
    recommended_song_ids = [song_id for song_id, _ in recommended_songs[:10]]

    # Return song titles along with IDs that exist in the dataset
    recommended_songs_with_names = []
    for song_id in recommended_song_ids:
        song_name = data[data['song_id'] == song_id]['song_name'].iloc[0] if song_id in data['song_id'].values else f"Song_{song_id}"
        recommended_songs_with_names.append((song_id, song_name))

    return recommended_songs_with_names

# Example usage: Recommendations for a user with song names
user_id = 1
recommendations_with_names = get_recommendations_with_names(user_id, user_similarity_matrix, user_item_matrix, data)
print("Recommendations for User", user_id, "with Song Names:")
for song_id, song_name in recommendations_with_names:
    print(f"Song ID: {song_id}, Song Name: {song_name}")
